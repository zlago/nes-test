; - le main file -
; if something doesnt deserve
; its own file i throw it here
; sometimes i forget to do that though

          ;''''''''''''''''''''''''''''''''''''''''''''''''';
         ; /""|   /"""/ "wow"   "peak of technology"       ;
        ; /   |  /   /"|/""/-""".  /""/""/"" ,,,,,  "much ;
       ; /    | /   /     /  ..  |/        //    / data" ;
      ; /     |/   /  -""'|  ''  /  /  /  / """""       ;
     ; /   .  '   /../     "-...-,,/,,^"""//"""\/"""\  ;
    ; /   /|     /    "8K CHR!"     '-,  //,,^ ,\ ' / ;
   ; /   / |    /   "16K of PRG"     /  / ,' _'/ . \ ;
  ; /   /  |   /                    /,,//,,,,,/\,,,/;
 ; /,,,/   ;../ cuz i couldnt bother writting code ;
;,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,;

; to do list :
	; [ ] NMI
		; [ ] handle DMA
		; [ ] handle VRAM updates
		; [ ] lagproof scrolling
		; [ ] properly handle IRQ
	; [ ] game
		; [ ] gameplay
			; [ ] actually have actors
			; [ ] allow for controlling actors
			; [ ] some collision
			; [ ] put actors in shadow OAM
		; [ ] loading
			; load levels
	; [ ] write more todo

.include "nes.i" ; hardware definitions
.include "nes2header.i" ; header definition macros
.include "main.imp" ; import used labels

; define the header
nes2mapper 0 ; NROM
nes2prg 16384 ; 16K PRG
nes2chr 8192 ; 8K CHR
nes2mirror 'H' ; horizontal mirroring
nes2tv 'N' ; NTSC only
nes2expansion 3 ; 4 player adapter (FC)
nes2end

.segment "ZEROPAGE"
zColor: .res 1

.segment "VECTORS"
; define the interrpt/reset vectors
.word NMI ; NMI vector
.word Reset ; reset vector
.word IRQ ; IRQ/BRK vector

.segment "CODE"
; execution starts here
Start:
.export Start
	; init zColor and zNMI
	lda #$21-1
	sta zColor
	lda #00
	sta zNMI
Spin: ; spin till nmi flag set
	ldx #6 ; extra delay
@Loop: ; the actual waitloop
	lda zNMI ; poll nmi flag
	beq @Loop
	lda #$00 ; reset nmi flag
	sta zNMI
	dex ; delay writes so its easier on the eyes
	bne @Loop
Color: ; do funny math on palette
	; read buttons
	jsr PollPads
	; read, idk
	lda zPad1
	; select address
	lda PPUSTATUS ; reset latch
	lda #.hibyte(PPU_PAL)
	sta PPUADDR
	lda #.lobyte(PPU_PAL)
	sta PPUADDR
	; prep data
	inc zColor
	lda zColor
	sta PPUDATA ; load color
	; loop palette cycle if needed
	cmp #$2d-1
	bcc Spin
	lda #$21-1
	sta zColor
	; done
	jmp Spin

.segment "CHR"
.incbin "res/patterns.chr" ; CHR ROM
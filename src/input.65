; read joypads when called or something

.include "nes.i"

.segment "ZEROPAGE"
.exportzp zPads, zPad1, zPad2, zPad3, zPad4
zPads: ; for zp,x addressing
zPad1: .res 1 ; controller 1
zPad2: .res 1 ; controller 2
zPad3: .res 1 ; controller 3
zPad4: .res 1 ; controller 4

.segment "CODE"
PollPads: ; read joypads i guess
.export PollPads
; based on NESdev polling example code
; which uses the pad state as a shift register
	; first prepare for polling
	lda #01
	sta JOY1 ; strobe pads
	sta zPad4 ; see comment on bcc
	lsr ; A = 0
	sta JOY1 ; unstrobe
@Loop: ; actual polling happens here
	; poll JOY1
	lda JOY1 ; shift in a bit
	lsr a     ;        D0 -> Cy
	rol zPad1 ; bit7..bit0 <- Cy
	lsr a     ;        D1 -> Cy
	rol zPad3 ; bit7..bit0 <- Cy
	; repeat for JOY2
	lda JOY2
	lsr a
	rol zPad2
	lsr a
	rol zPad4
	; since we set bit0, once it gets
	; shifted into carry, it means were
	; done polling
	bcc @Loop
	; done!
	rts